public class Stack {
    int top;
    int size;
    char[]schar;
    double[]sdouble;
    
    //Stack class
    public Stack(){
        size = 100;
        top = -1;
        schar = new char[size];
        sdouble = new double[size];
    }
    //Pushing in character
    public void push(char data){
        if(top == size){
            System.out.println("Error");
        }else{
            top++;
            schar[top] = data;
        }
    }
    //Pushing numbers
    public void push(double data){
        if(top == size){
            System.out.println("Error");
        }else{
            top++;
            sdouble[top] = data;
        }
    }
    //Popping Character
    public char pop(){
        if(size ==0) throw new IllegalStateException("Stack is empty");
           return schar[top--];
    }
    
    //Popping Numbers
    public double pop1(){
        if(size ==0) throw new IllegalStateException("Stack is empty");
           return sdouble[top--];
    }
    //Peek next element
    public char peek(){
        return schar[top];
    }
    
    //Check is stack is empty
    public boolean isEmpty(){
        if(top ==-1){
            return true;
        }else
        return false;
    }
    
    
    //check Operator precedence
    public static int opcode(char c){
        
        if(c == '+' || c == '-'){
            return 1;
        }else if (c == '*'|| c == '/'){
            return 2;
        }else{
            return 0;
        }
    }
    
    
    // Converting to Postfix
    public static String solve(String infix, int n){
        String postfix ="";//create string varriable to store the result
        
        for(int i =0; i < n; i++){
            char c = infix.charAt(i);// Check each charater of the String
            
            if (Character.isLetter(c) || Character.isDigit(c)){ // If the character is alphabet of digit, apend to the string
                postfix = postfix+c;
            }else if (c == '('){ //If the character is ( push into stack
                spost.push(c);
                
            }else if (c == ')'){
               while(spost.peek()!='(' ){//if the character is ) pop until you see ( then stop
                   postfix = postfix+spost.pop();
               }
               spost.pop();// Pop the ( pushed in early
            }else{
                while (!spost.isEmpty() && (spost.peek()!='(' ) && opcode(c)<= opcode(spost.peek()))
                postfix = postfix+spost.pop();// Pop if the above condition is true
                spost.push(c);//otherwise, push the operator into the stack
            }
        }
        while(!spost.isEmpty())
            postfix = postfix+spost.pop();
            return postfix; // pop everything remaining
    }
    
    //Method to evaluate postfix
    public static double Evaluate(String postfix){
        int n = postfix.length();
        char z;
        for(int i =0; i < n; i++){
           z = postfix.charAt(i);
           
           if(Character.isDigit(z)){
               sresult.push(z -'0');
           }else{
               double op1 = sresult.pop1();
               double op2 = sresult.pop1();
               
               switch(z){
                   case '+': sresult.push(op2+op1);
                   break;
                   case '-': sresult.push(op2-op1);
                   break;
                   case '*': sresult.push(op2*op1);
                   break;
                   case '/': sresult.push(op2/op1);
               }
           }
        }
        return sresult.pop1();
    }
    
    //Method to convert to prefix
    public static String solve2 (String infix, int n){
        //create a new string to hold reversed infix
        String reverse ="";
        
        for(int i = n-1; i >=0; i--){
            reverse = reverse+ infix.charAt(i);
        }
        int l = reverse.length();
        
        //Do postfix evaluation on the reversed infix
        char q;
        String prepos ="";
        for(int j =0; j <l; j++){
            q = reverse.charAt(j);
            
            if(Character.isDigit(q)){
                prepos = prepos+q;
            }else if (q == ')') {
                spre.push(q);
            }
            else if (q == '('){
                while(spre.peek()!=')'){
                    prepos = prepos+spre.pop();
                }
                spre.pop();
            }
            else{
                while(!spre.isEmpty() && (spre.peek()!=')') && opcode(q)<= opcode(spre.peek()))
                prepos = prepos+ spre.pop();
                spre.push(q);
            }
        }
        while(!spre.isEmpty())
        prepos =prepos+spre.pop();
        
        //Reverse the result of the postfix evaluation and hold in a new String
        String prefix = "";
        
        for(int k =prepos.length()-1; k >=0;k--){
            prefix =prefix +prepos.charAt(k);
        }
        return prefix;
    }
    
    static Stack spre = new Stack(); //Stack object for prefix
    static Stack spost = new Stack(); //Stack object for postfix
    static Stack sresult = new Stack();//Stack object for evaluating postfix
    
    
    public static void main(String args[]) {
        
        //Infix stored as a string
        String infix = "(1+4/2+1+2)*3/2";
        int n = infix.length();
        
        //Method call for postfix
        String postfix = solve(infix,n);
        
        //Method call for Evaluation
        double evlue = Evaluate(postfix);
        
        //Method call for prefix
        String prefix = solve2(infix,n);
        
        System.out.println("Infix Notation: " + infix);
        System.out.println("PostFix Notation: "+postfix);
        System.out.println("Prefix Notation: " +prefix);
        System.out.println("Evaluated Result: " + evlue);
    }
}
